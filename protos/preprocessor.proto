syntax = "proto2";

package fast_semantic_segmentation.protos;

message PreprocessingStep {
    oneof preprocessing_step {
        SetFixedImageSize set_fixed_image_size = 1;
        AspectRatioImageResize aspect_ratio_image_resize = 2;
        RandomImageScale random_image_scale = 3;
        RandomCropImage random_image_crop = 4;
        RandomHorizontalFlip random_horizontal_flip = 5;
    }
}

enum ResizeType {
    BILINEAR = 0;
    NEAREST_NEIGHBOR = 1;
    BICUBIC = 2;
}

// must be used for no resize to set image shape
message SetFixedImageSize {
    optional int32 fixed_height = 1;
    optional int32 fixed_width = 2;
    optional int32 images_channel_dim = 3 [default=3];
    optional int32 labels_channel_dim = 4 [default=1];
}

message AspectRatioImageResize {
    // Desired size of the smaller image dimension in pixels.
    optional int32 min_dimension = 1 [default = 600];
    // Desired size of the larger image dimension in pixels.
    optional int32 max_dimension = 2 [default = 1024];
    // Desired method when resizing image.
    optional ResizeType resize_method = 3 [default = BILINEAR];
    // Whether to pad the image with zeros so the output spatial size is
    // [max_dimension, max_dimension]. Note that the zeros are padded to the
    // bottom and the right of the resized image.
    optional bool pad_to_max_dimension = 4 [default = false];
}

message RandomImageScale {
    optional float min_scale_ratio = 1 [default=0.5];
    optional float max_scale_ratio = 2 [default=2.0];
}

message RandomCropImage {
    optional int32 crop_height = 1;
    optional int32 crop_width = 2;
    optional int32 images_channel_dim = 3 [default=3];
    optional int32 labels_channel_dim = 4 [default=1];
    optional int32 int_seed = 5;
}

message RandomHorizontalFlip {}
